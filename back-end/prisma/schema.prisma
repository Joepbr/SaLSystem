// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model curso {
  id              Int              @id@default(autoincrement())
  nome            String
  descricao       String?
  detalhes        String?
  imageUrl        String?
  modulo          modulo[]
}

model modulo {
  id              Int               @id@default(autoincrement())
  titulo          String
  dias_sem        dias_sem[]
  horario         String
  dur_aula        Int
  inicio          DateTime
  dur_modulo      Int
  presencial      Boolean
  remoto          Boolean
  vip             Boolean           @default(false)
  preco           Float?
  livro           String?
  wagrupo         String?
  active          Boolean           @default(true)
  curso           curso             @relation(fields: [cursoId], references: [id])
  cursoId         Int        
  professor       professor         @relation(fields: [profId], references: [id])
  profId          Int
  aula            aula[]
  matricula       matricula[]
  avaliacao       avaliacao[]

  //@@id(name: "codigo", [cursoId, id])
}

model dias_sem {
  id             Int                @id @default(autoincrement())
  dia            String
  modulo         modulo             @relation(fields: [moduloId], references: [id])
  moduloId       Int
}

model user {
  id              Int               @id @default(autoincrement())
  nome            String
  username        String            @unique
  email           String
  telefone        String
  password        String
  is_admin        Boolean           @default(false)
  end_logr        String
  end_num         Int
  end_compl       String?
  end_cid         String
  end_estado      String
  professor       professor?
  aluno           aluno?
}

model professor {
  cpf             String?           @unique@db.VarChar(11)
  data_nasc       DateTime?
  especialidade   String?
  salario         Float?
  imageUrl        String?
  user            user              @relation(fields:[id], references: [id])
  id              Int               @id
  modulo          modulo[]
  aula            aula[]
  avaliacao       avaliacao[]
  disponibilidade disponibilidade[]
}

model aluno {
  data_nasc       DateTime
  user            user              @relation(fields:[id], references:[id])
  id              Int               @id
  resp_nome       String?
  resp_email      String?
  resp_telefone   String?
  resp_data_nasc  DateTime?
  resp_parent     String?
  matricula       matricula[]
  presenca        presenca[]
  avaliacao       avaliacao[]
}

model aula {
  id              Int               @id@default(autoincrement())
  modulo          modulo            @relation(fields:[moduloId], references:[id])
  moduloId        Int
  professor       professor         @relation(fields: [profId], references: [id])
  profId          Int
  data            DateTime
  conteudo        String?
  presenca        presenca[]

  //@@id(name: "aulaId", [moduloId, data])
}

model matricula {
  id               Int              @id@default(autoincrement())
  aluno            aluno            @relation(fields:[alunoId], references:[id])
  alunoId          Int
  modulo           modulo           @relation(fields:[moduloId], references:[id])
  moduloId         Int
  notaFinal        Float?

  //@@id(name: "Id", [alunoId, moduloId])
}

model presenca {
  id               Int               @id@default(autoincrement())
  aluno            aluno             @relation(fields:[alunoId], references:[id])
  alunoId          Int
  aula             aula              @relation(fields:[aulaId], references:[id])
  aulaId           Int
  presente         Boolean           @default(false)

  //@@id(name: "Id", [alunoId, aulaId])
}

model avaliacao {
  id               Int               @id@default(autoincrement())
  professor        professor         @relation(fields:[profId], references: [id])
  profId           Int
  modulo           modulo            @relation(fields: [moduloId], references: [id])
  moduloId         Int
  aluno            aluno             @relation(fields: [alunoId], references: [id])
  alunoId          Int
  data             DateTime
  is_prova         Boolean
  nota             Float?

  //@@id(name: "Id", [profId, moduloId, alunoId, data])
}

model disponibilidade {
  id               Int               @id@default(autoincrement())
  professor        professor         @relation(fields:[profId], references: [id])
  profId           Int
  dia              Int
  start            DateTime
  end              DateTime
}